from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from auction_app.models import Lot, LotImage, Bid
from users_app.models import UserProfile
from telegram_bot.keyboards.inline_kb import create_lot_keyboard, create_bid_keyboard
from django.db.models import F as D_F
from django.utils import timezone
import asyncio
from support_app.models import Complaint

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class BidState(StatesGroup):
    waiting_for_bid_amount = State()

class ComplaintState(StatesGroup):
    waiting_for_complaint_text = State()

@router.callback_query(F.data == "participate")
async def show_active_lots_handler(callback: CallbackQuery):
    active_lots = await Lot.objects.filter(status='active', end_time__gt=timezone.now()).select_related('seller').prefetch_related('images').order_by('end_time')

    if not active_lots:
        await callback.message.edit_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
        await callback.answer()
        return

    for lot in active_lots:
        images = await lot.images.all()
        media_group = []
        caption_text = (
            f"‚ú® <b>–ê–ö–¢–ò–í–ù–´–ô –õ–û–¢</b> ‚ú®\n\n"
            f"<b>{lot.title}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price} ‚ÇΩ\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='{lot.telegram_link}'>{lot.seller.username}</a>\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {lot.end_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
        keyboard = create_lot_keyboard(lot.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞
        if images:
            for i, img in enumerate(images):
                image_path = img.image.path
                media_group.append(InputMediaPhoto(media=FSInputFile(image_path), caption=caption_text if i == 0 else None))
            await callback.message.answer_media_group(media=media_group)
        else:
            await callback.message.answer(caption_text)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data.startswith("participate_"))
async def participate_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å".
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –¥–ª—è —Å—Ç–∞–≤–∫–∏.
    """
    lot_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    try:
        lot = await Lot.objects.aget(id=lot_id, status='active')
        user_profile = await UserProfile.objects.aget(telegram_id=user_id)
    except (Lot.DoesNotExist, UserProfile.DoesNotExist):
        await callback.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    await callback.bot.send_message(
        chat_id=user_id,
        text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –ª–æ—Ç: <b>{lot.title}</b>\n"
             f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price} ‚ÇΩ</b>\n"
             f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{lot.current_price + 1} ‚ÇΩ</b> (–∏–ª–∏ –±–æ–ª—å—à–µ)\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=await create_bid_keyboard(lot_id)
    )
    await callback.answer("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.", show_alert=True)

@router.callback_query(F.data.startswith("bid_"))
async def bid_preset_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫.
    """
    parts = callback.data.split("_")
    lot_id = int(parts[1])
    user_id = callback.from_user.id

    try:
        lot = await Lot.objects.aget(id=lot_id, status='active')
        user_profile = await UserProfile.objects.aget(telegram_id=user_id)
    except (Lot.DoesNotExist, UserProfile.DoesNotExist):
        await callback.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    if lot.end_time < timezone.now():
        await callback.answer("–¢–æ—Ä–≥–∏ –ø–æ —ç—Ç–æ–º—É –ª–æ—Ç—É —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.", show_alert=True)
        return

    if parts[2] == "custom":
        await state.set_state(BidState.waiting_for_bid_amount)
        await state.update_data(lot_id=lot_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        await callback.answer()
        return

    bid_amount = float(parts[2])

    if bid_amount <= lot.current_price:
        await callback.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ({bid_amount} ‚ÇΩ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ({lot.current_price} ‚ÇΩ).", show_alert=True)
        return

    async with asyncio.Lock():
        try:
            lot = await Lot.objects.select_for_update().aget(id=lot_id)
            if bid_amount <= lot.current_price:
                await callback.answer(f"–ö—Ç–æ-—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –≤—ã—à–µ –≤–∞—à–µ–π. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price} ‚ÇΩ", show_alert=True)
                return

            lot.current_price = bid_amount
            await lot.asave(update_fields=['current_price'])

            await Bid.objects.acreate(
                lot=lot,
                bidder=user_profile,
                amount=bid_amount
            )
            await callback.message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ <b>{bid_amount} ‚ÇΩ</b> –Ω–∞ –ª–æ—Ç <b>{lot.title}</b> –ø—Ä–∏–Ω—è—Ç–∞!")
            await callback.answer("–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–∞!")

            await callback.bot.send_message(
                chat_id="-1001234567890", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
                text=f"üî• –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç <b>{lot.title}</b>!\n"
                     f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price} ‚ÇΩ</b>\n"
                     f"–°–¥–µ–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_profile.username or user_profile.telegram_id}"
            )

        except Exception as e:
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ: {e}")

@router.message(BidState.waiting_for_bid_amount, F.text.regexp(r'^\d+(\.\d{1,2})?$'))
async def process_custom_bid(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.
    """
    data = await state.get_data()
    lot_id = data['lot_id']
    user_id = message.from_user.id
    bid_amount = float(message.text)

    try:
        lot = await Lot.objects.aget(id=lot_id, status='active')
        user_profile = await UserProfile.objects.aget(telegram_id=user_id)
    except (Lot.DoesNotExist, UserProfile.DoesNotExist):
        await message.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return

    if lot.end_time < timezone.now():
        await message.answer("–¢–æ—Ä–≥–∏ –ø–æ —ç—Ç–æ–º—É –ª–æ—Ç—É —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        await state.clear()
        return

    if bid_amount <= lot.current_price:
        await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ({bid_amount} ‚ÇΩ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ({lot.current_price} ‚ÇΩ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
                             reply_markup=await create_bid_keyboard(lot_id))
        return

    async with asyncio.Lock():
        try:
            lot = await Lot.objects.select_for_update().aget(id=lot_id)
            if bid_amount <= lot.current_price:
                await message.answer(f"–ö—Ç–æ-—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –≤—ã—à–µ –≤–∞—à–µ–π. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {lot.current_price} ‚ÇΩ",
                                     reply_markup=await create_bid_keyboard(lot_id))
                await state.clear()
                return

            lot.current_price = bid_amount
            await lot.asave(update_fields=['current_price'])

            await Bid.objects.acreate(
                lot=lot,
                bidder=user_profile,
                amount=bid_amount
            )

            await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ <b>{bid_amount} ‚ÇΩ</b> –Ω–∞ –ª–æ—Ç <b>{lot.title}</b> –ø—Ä–∏–Ω—è—Ç–∞!")
            await state.clear()

            await message.bot.send_message(
                chat_id="-1001234567890", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
                text=f"üî• –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç <b>{lot.title}</b>!\n"
                     f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{lot.current_price} ‚ÇΩ</b>\n"
                     f"–°–¥–µ–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_profile.username or user_profile.telegram_id}"
            )

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–µ: {e}")
            await state.clear()

@router.message(BidState.waiting_for_bid_amount)
async def process_custom_bid_invalid(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.00).")

@router.callback_query(F.data.startswith("cancel_bid_"))
async def cancel_bid_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–≤–∫–∏.
    """
    await state.clear()
    await callback.message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback.answer()

@router.callback_query(F.data.startswith("lot_details_"))
async def lot_details_handler(callback: CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    lot_id = int(callback.data.split("_")[2])
    try:
        lot = await Lot.objects.aget(id=lot_id)
        images = await lot.images.all()
    except Lot.DoesNotExist:
        await callback.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    description_text = (
        f"<b>–õ–æ—Ç: {lot.title}</b>\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {lot.description}\n"
        f"<b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {lot.start_price} ‚ÇΩ\n"
        f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {lot.current_price} ‚ÇΩ\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <a href='{lot.telegram_link}'>{lot.seller.username}</a>\n"
        f"<b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> {lot.location or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤:</b> {lot.start_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤:</b> {lot.end_time.strftime('%d.%m.%Y %H:%M')}\n"
    )

    media_group = []
    for i, img in enumerate(images):
        image_path = img.image.path
        media_group.append(InputMediaPhoto(media=FSInputFile(image_path), caption=description_text if i == 0 else None))

    if media_group:
        await callback.message.answer_media_group(media=media_group)
    else:
        await callback.message.answer(description_text)

    await callback.answer()

@router.callback_query(F.data.startswith("complain_lot_"))
async def complain_lot_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—É –Ω–∞ –ª–æ—Ç.
    """
    lot_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    try:
        lot = await Lot.objects.aget(id=lot_id)
        reporter = await UserProfile.objects.aget(telegram_id=user_id)
    except (Lot.DoesNotExist, UserProfile.DoesNotExist):
        await callback.answer("–û—à–∏–±–∫–∞: –ª–æ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    await state.set_state(ComplaintState.waiting_for_complaint_text)
    await state.update_data(lot_id=lot_id, reporter_id=reporter.id, target_admin_id=lot.seller.id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –ª–æ—Ç:")
    await callback.answer()

@router.message(ComplaintState.waiting_for_complaint_text)
async def process_complaint_text(message: Message, state: FSMContext) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–∞–ª–æ–±—É –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    data = await state.get_data()
    lot_id = data['lot_id']
    reporter_id = data['reporter_id']
    target_admin_id = data['target_admin_id']
    complaint_text = message.text

    try:
        reporter = await UserProfile.objects.aget(id=reporter_id)
        target_admin = await UserProfile.objects.aget(id=target_admin_id)
        lot = await Lot.objects.aget(id=lot_id)

        await Complaint.objects.acreate(
            reporter=reporter,
            target_admin=target_admin,
            message=complaint_text,
        )

        support_group_id = -1001234567891 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await message.bot.send_message(
            chat_id=support_group_id,
            text=f"üö® <b>–ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê!</b> üö®\n\n"
                 f"–û—Ç: {reporter.username or reporter.telegram_id}\n"
                 f"–ù–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target_admin.username or target_admin.telegram_id}\n"
                 f"–õ–æ—Ç: {lot.title}\n"
                 f"–°–æ–æ–±—â–µ–Ω–∏–µ: {complaint_text}\n\n"
                 f"<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</i>"
        )
        await message.answer("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
    finally:
        await state.clear()